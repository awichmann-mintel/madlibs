"""
Django settings for Mad Libz project.

Generated by https://bitbucket.org/mintel/cookiecutter-eve-django

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import logging
import os

import environ
import requests
from mintel_logging import LogLevel
from mintel_logging.contrib import capture_loggers

logger = logging.getLogger("mintel.config")
BASE_DIR = environ.Path(__file__) - 2

env = environ.Env()

env_file = str(BASE_DIR.path(".env"))
if os.path.exists(env_file):
    # Operating System Environment variables have precedence over variables defined in the .env file,
    # that is to say variables from the .env files will only be used if not defined
    # as environment variables.
    logger.debug("Loading : {}".format(env_file))
    env.read_env(env_file)
    logger.debug(
        "The .env file has been loaded. See config/settings.py for more information."
    )


LOGGING_CONFIG = None
capture_loggers(
    "everest.mad-libz",
    env("MINTEL_LOGGING_LEVEL", default=LogLevel.INFO, cast=LogLevel.__members__.get),
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DJANGO_DEBUG", default=False)


def _default_secret_key():
    """Return default Django SECRET_KEY.
    If DEBUG, this should be a random-looking but actually deterministic string.
    """
    if not DEBUG:
        return env.NOTSET
    import uuid

    return str(
        uuid.uuid3(uuid.NAMESPACE_URL, """mad-libz""")
    )


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("DJANGO_SECRET_KEY", default=_default_secret_key())

ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=[])
ALLOWED_HOSTS.append("127.0.0.1")  # Allow health check inside container

# Allow requests to AWS EC2 private IP i.e. load balancer health checks
# https://gist.github.com/dryan/8271687
EC2_PRIVATE_IP = None
try:
    _response = requests.get(
        "http://169.254.169.254/latest/meta-data/local-ipv4", timeout=0.01
    )
    EC2_PRIVATE_IP = _response.text
    if EC2_PRIVATE_IP:
        ALLOWED_HOSTS.append(EC2_PRIVATE_IP)
except requests.exceptions.RequestException:
    pass


USE_X_FORWARDED_HOST = True  # this header set by nginx

TEST_RUNNER = "config.test_runner.PytestTestRunner"

# Application definition

INSTALLED_APPS = [
    # Django apps
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 3rd party apps
    "health_check",
    "health_check.cache",
    "health_check.db",
    "django_extensions",
    "gatekeeper",
    # Local apps
    "mad_libz",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "gatekeeper.middleware.GatekeeperAuthMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    "default": env.db(
        "DJANGO_DATABASE_URL", default="sqlite:///" + str(BASE_DIR.path("db.sqlite3"))
    )
}
if DATABASES["default"]["ENGINE"] == "django.db.backends.postgresql_psycopg2":
    # Temp fix until
    # https://github.com/joke2k/django-environ/commit/34bb11fe29a8dc1e901a4bcaf0f092d0905b95c9
    # is released.
    DATABASES["default"]["ENGINE"] = "django.db.backends.postgresql"

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

AUTHENTICATION_BACKENDS = ["gatekeeper.auth.GatekeeperAuthBackend"]
GK_EXEMPT_URLS = ["health_check_home"]
GK_UPDATE_BASE_URL = True
GK_ROLES = []


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/
STATIC_ROOT = env("DJANGO_STATIC_ROOT", default=str(BASE_DIR.path("static")))
STATIC_URL = "/static/"
